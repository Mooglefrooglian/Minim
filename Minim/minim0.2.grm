"Name"     = 'Minim'
"Author"   = 'Drew "Mooglefrooglian" Barclay'
"Version"  = '0.2'
"About"    = 'Minimalist syntax refining C'

"Start Symbol" = <Program>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["\]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {Letter}{AlphaNumeric}*
StringLiteral = '"' ( {String Chars} | '\' {Printable} )* '"'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl opt> ::= NewLine <nl opt>      !Zero or more
          |  !Empty

! <nl opt> removes blank lines before first statement

<Program> ::= <nl opt> <FunctionList>
           
<FunctionList> ::= <Function> <FunctionList>
                |
                
<Function> ::= Identifier Identifier '(' <ParameterList> ')' <nl> <StatementList> ';' <nl opt>
            | Identifier Identifier <nl> <StatementList> ';' <nl opt> !Function declaration that has no parameters
            
<FunctionCall> ::= Identifier '(' <ArgumentList> ')'
            
<ParameterList> ::= <Parameter> ',' <ParameterList>
                 | <Parameter>
                 |
                 
<Parameter> ::= Identifier Identifier
             
<ArgumentList> ::= <Expression> ',' <ArgumentList>
                | <Expression>
                |
             
<StatementList> ::= <Statement> <StatementList>
                 |
                 
<Statement> ::= Identifier <nl> !Calling a function without brackets
             | <FunctionCall> <nl> !Function call
             | Identifier '=' <Expression> <nl> !Assignment
             | '^' <nl> !Return statement
             | '^' <Expression> <nl>
             
<Expression>  ::= <Expression> '+' <Mult Exp> 
               |  <Expression> '-' <Mult Exp> 
               |  <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
               |  <Mult Exp> '/' <Negate Exp> 
               |  <Negate Exp> 

<Negate Exp>  ::= '-' <Value> 
               |  <Value> 

!Add more values to the rule below - as needed

<Value>       ::= Identifier            
               |  '(' <Expression> ')'
               | StringLiteral
               | <FunctionCall> !function call
